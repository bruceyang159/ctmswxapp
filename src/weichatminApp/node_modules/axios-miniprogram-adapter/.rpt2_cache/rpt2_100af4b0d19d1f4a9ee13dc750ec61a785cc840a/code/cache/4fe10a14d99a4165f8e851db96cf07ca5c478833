{"code":"import utils from 'axios/lib/utils';\r\nimport settle from 'axios/lib/core/settle';\r\nimport buildURL from 'axios/lib/helpers/buildURL';\r\nimport encode from './utils/encoder';\r\nimport { getRequest, transformError, transformResponse } from './utils/platForm';\r\nvar warn = console.warn;\r\nvar isJSONstr = function (str) {\r\n    try {\r\n        return typeof str === 'string' && str.length && (str = JSON.parse(str)) && Object.prototype.toString.call(str) === '[object Object]';\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexport default function mpAdapter(config) {\r\n    var request = getRequest();\r\n    return new Promise(function (resolve, reject) {\r\n        var requestTask;\r\n        var requestData = config.data;\r\n        var requestHeaders = config.headers;\r\n        // baidu miniprogram only support upperCase\r\n        var requestMethod = (config.method && config.method.toUpperCase()) || 'GET';\r\n        // miniprogram network request config\r\n        var mpRequestOption = {\r\n            method: requestMethod,\r\n            url: buildURL(config.url, config.params, config.paramsSerializer),\r\n            // Listen for success\r\n            success: function (mpResponse) {\r\n                var response = transformResponse(mpResponse, config, mpRequestOption);\r\n                settle(resolve, reject, response);\r\n            },\r\n            // Handle request Exception\r\n            fail: function (error) {\r\n                transformError(error, reject, config);\r\n            },\r\n            complete: function () {\r\n                requestTask = undefined;\r\n            }\r\n        };\r\n        // HTTP basic authentication\r\n        if (config.auth) {\r\n            var _a = [config.auth.username || '', config.auth.password || ''], username = _a[0], password = _a[1];\r\n            requestHeaders.Authorization = 'Basic ' + encode(username + ':' + password);\r\n        }\r\n        // Set the request timeout\r\n        if (config.timeout !== 0) {\r\n            warn('The \"timeout\" option is not supported by miniprogram. For more information about usage see \"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#全局配置\"');\r\n        }\r\n        // Add headers to the request\r\n        utils.forEach(requestHeaders, function setRequestHeader(val, key) {\r\n            var _header = key.toLowerCase();\r\n            if ((typeof requestData === 'undefined' && _header === 'content-type') || _header === 'referer') {\r\n                // Remove Content-Type if data is undefined\r\n                // And the miniprogram document said that '设置请求的 header，header 中不能设置 Referer'\r\n                delete requestHeaders[key];\r\n            }\r\n        });\r\n        mpRequestOption.header = requestHeaders;\r\n        // Add responseType to request if needed\r\n        if (config.responseType) {\r\n            mpRequestOption.responseType = config.responseType;\r\n        }\r\n        if (config.cancelToken) {\r\n            // Handle cancellation\r\n            config.cancelToken.promise.then(function onCanceled(cancel) {\r\n                if (!requestTask) {\r\n                    return;\r\n                }\r\n                requestTask.abort();\r\n                reject(cancel);\r\n                // Clean up request\r\n                requestTask = undefined;\r\n            });\r\n        }\r\n        // Converting JSON strings to objects is handed over to the MiniPrograme\r\n        if (isJSONstr(requestData)) {\r\n            requestData = JSON.parse(requestData);\r\n        }\r\n        if (requestData !== undefined) {\r\n            mpRequestOption.data = requestData;\r\n        }\r\n        requestTask = request(mpRequestOption);\r\n    });\r\n}\r\n","dts":{"name":"/Users/bigMeow/Downloads/axios-miniprogram-adapter/index.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig, AxiosPromise } from 'axios';\r\nexport default function mpAdapter(config: AxiosRequestConfig): AxiosPromise;\r\n"}}
