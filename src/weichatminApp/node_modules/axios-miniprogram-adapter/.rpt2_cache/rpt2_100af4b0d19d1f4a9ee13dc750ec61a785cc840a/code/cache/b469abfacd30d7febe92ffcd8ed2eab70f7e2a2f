{"code":"import createError from 'axios/lib/core/createError';\r\nvar platFormName = 'wechat';\r\n/**\r\n * 获取各个平台的请求函数\r\n */\r\nexport function getRequest() {\r\n    switch (true) {\r\n        case typeof wx === 'object':\r\n            platFormName = 'wechat';\r\n            return wx.request.bind(wx);\r\n        case typeof swan === 'object':\r\n            platFormName = 'baidu';\r\n            return swan.request.bind(swan);\r\n        case typeof my === 'object':\r\n            platFormName = 'alipay';\r\n            return (my.request || my.httpRequest).bind(my);\r\n        default:\r\n            return wx.request.bind(wx);\r\n    }\r\n}\r\n/**\r\n * 处理各平台返回的响应数据，抹平差异\r\n * @param mpResponse\r\n * @param config axios处理过的请求配置对象\r\n * @param request 小程序的调用发起请求时，传递给小程序api的实际配置\r\n */\r\nexport function transformResponse(mpResponse, config, mpRequestOption) {\r\n    var headers = mpResponse.header || mpResponse.headers;\r\n    var status = mpResponse.statusCode || mpResponse.status;\r\n    var statusText = '';\r\n    if (status === 200) {\r\n        statusText = 'OK';\r\n    }\r\n    else if (status === 400) {\r\n        statusText = 'Bad Request';\r\n    }\r\n    var response = {\r\n        data: mpResponse.data,\r\n        status: status,\r\n        statusText: statusText,\r\n        headers: headers,\r\n        config: config,\r\n        request: mpRequestOption\r\n    };\r\n    return response;\r\n}\r\n/**\r\n * 处理各平台返回的错误信息，抹平差异\r\n * @param error 小程序api返回的错误对象\r\n * @param reject 上层的promise reject 函数\r\n * @param config\r\n */\r\nexport function transformError(error, reject, config) {\r\n    switch (platFormName) {\r\n        case 'wechat':\r\n            if (error.errMsg.indexOf('request:fail abort') !== -1) {\r\n                // Handle request cancellation (as opposed to a manual cancellation)\r\n                reject(createError('Request aborted', config, 'ECONNABORTED', ''));\r\n            }\r\n            else if (error.errMsg.indexOf('timeout') !== -1) {\r\n                // timeout\r\n                reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', ''));\r\n            }\r\n            else {\r\n                // NetWordError\r\n                reject(createError('Network Error', config, null, ''));\r\n            }\r\n            break;\r\n        case 'alipay':\r\n            // https://docs.alipay.com/mini/api/network\r\n            if ([14, 19].includes(error.error)) {\r\n                reject(createError('Request aborted', config, 'ECONNABORTED', ''));\r\n            }\r\n            else if ([13].includes(error.error)) {\r\n                // timeout\r\n                reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', ''));\r\n            }\r\n            else {\r\n                // NetWordError\r\n                reject(createError('Network Error', config, null, ''));\r\n            }\r\n            break;\r\n        case 'baidu':\r\n            // TODO error.errCode\r\n            reject(createError('Network Error', config, null, ''));\r\n            break;\r\n    }\r\n}\r\n","dts":{"name":"/Users/bigMeow/Downloads/axios-miniprogram-adapter/utils/platForm.d.ts","writeByteOrderMark":false,"text":"import { AxiosResponse, AxiosRequestConfig } from 'axios';\r\n/**\r\n * 获取各个平台的请求函数\r\n */\r\nexport declare function getRequest(): NetworkAPIs['request'];\r\n/**\r\n * 处理各平台返回的响应数据，抹平差异\r\n * @param mpResponse\r\n * @param config axios处理过的请求配置对象\r\n * @param request 小程序的调用发起请求时，传递给小程序api的实际配置\r\n */\r\nexport declare function transformResponse(mpResponse: NetworkRequestRes, config: AxiosRequestConfig, mpRequestOption: NetworkRequestOpts): AxiosResponse;\r\n/**\r\n * 处理各平台返回的错误信息，抹平差异\r\n * @param error 小程序api返回的错误对象\r\n * @param reject 上层的promise reject 函数\r\n * @param config\r\n */\r\nexport declare function transformError(error: any, reject: any, config: any): void;\r\n"}}
